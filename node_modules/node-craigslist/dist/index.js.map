{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;;;;;;;;;AAEA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IACC,QAAQ,qBAAS,YAAT,CADT;AAAA,IAEC,oBAAoB,gBAFrB;AAAA,IAGC,mBAAmB,KAHpB;AAAA,IAIC,eAAe,UAJhB;AAAA,IAKC,sBAAsB,WALvB;AAAA,IAMC,0BAA0B;AACzB,WAAW,EADc;AAEzB,OAAO,EAFkB;AAGzB,SAAS;AAHgB,CAN3B;AAAA,IAWC,aAAa,CACZ,UADY,EAEZ,QAFY,EAGZ,QAHY,EAIZ,OAJY,CAXd;AAAA,IAiBC,kBAAkB,UAjBnB;AAAA,IAkBC,kBAAkB,UAlBnB;AAAA,IAmBC,oBAAoB,SAnBrB;AAAA,IAoBC,mBAAmB,uCApBpB;;AAsBA;;;;;;;AAOA,SAAS,kBAAT,CAA6B,UAA7B,EAAyC,MAAzC,EAAiD;AAChD,KACC,IAAI,kBAAQ,IAAR,CAAa,MAAb,CADL;AAAA,KAEC,UAAU,EAFX;;AAIA,SAAQ,WAAR,GAAsB,CAAC,EAAE,cAAF,EAAkB,IAAlB,MAA4B,EAA7B,EAAiC,IAAjC,EAAtB;AACA,SAAQ,MAAR,GAAiB,EAAE,yBAAF,EACf,IADe,CACV,GADU,EAEf,IAFe,CAEV,MAFU,CAAjB;AAGA,SAAQ,GAAR,GAAc,WACZ,SADY,CACF,WAAW,MAAX,CAAkB,cAAlB,CADE,EAEZ,OAFY,CAEJ,QAFI,EAEM,EAFN,CAAd;AAGA,SAAQ,QAAR,GAAmB,CAAC,EAAE,YAAF,EAAgB,IAAhB,CAAqB,MAArB,KAAgC,EAAjC,EAAqC,IAArC,EAAnB;AACA,SAAQ,KAAR,GAAgB,CAAC,EAAE,gBAAF,EAAoB,IAApB,MAA8B,EAA/B,EAAmC,IAAnC,EAAhB;AACA,SAAQ,GAAR,GAAc,UAAd;;AAEA;AACA,GAAE,kBAAF,EAAsB,IAAtB,CAA2B,eAA3B,EAA4C,IAA5C,CAAiD,UAAC,CAAD,EAAI,OAAJ,EAAgB;AAChE,MAAI,WAAW,EAAE,OAAF,EAAW,IAAX,EAAf;;AAEA;AACA,MAAI,YAAY,IAAZ,CAAiB,QAAjB,CAAJ,EAAgC;AAC/B,WAAQ,GAAR,GAAc,CAAC,SAAS,KAAT,CAAe,IAAf,EAAqB,CAArB,KAA2B,EAA5B,EAAgC,IAAhC,EAAd;AACA;AACA;;AAED;AACA,MAAI,UAAU,IAAV,CAAe,QAAf,KAA4B,EAAE,OAAF,EAAW,IAAX,CAAgB,MAAhB,EAAwB,IAAxB,CAA6B,UAA7B,CAAhC,EAA0E;AACzE,WAAQ,QAAR,GAAmB,IAAI,IAAJ,CAAS,EAAE,OAAF,EAAW,IAAX,CAAgB,MAAhB,EAAwB,IAAxB,CAA6B,UAA7B,CAAT,CAAnB;AACA;AACA;;AAED;AACA,MAAI,WAAW,IAAX,CAAgB,QAAhB,KAA6B,EAAE,OAAF,EAAW,IAAX,CAAgB,MAAhB,EAAwB,IAAxB,CAA6B,UAA7B,CAAjC,EAA2E;AAC1E,WAAQ,SAAR,GAAoB,IAAI,IAAJ,CAAS,EAAE,OAAF,EAAW,IAAX,CAAgB,MAAhB,EAAwB,IAAxB,CAA6B,UAA7B,CAAT,CAApB;AACA;AACA;AACD,EApBD;;AAsBA;AACA,GAAE,SAAF,EAAa,IAAb,CAAkB,GAAlB,EAAuB,IAAvB,CAA4B,UAAC,CAAD,EAAI,OAAJ,EAAgB;AAC3C,UAAQ,MAAR,GAAiB,QAAQ,MAAR,IAAkB,EAAnC;AACA,UAAQ,MAAR,CAAe,IAAf,CAAoB,CAAC,EAAE,OAAF,EAAW,IAAX,CAAgB,MAAhB,KAA2B,EAA5B,EAAgC,IAAhC,EAApB;AACA,EAHD;;AAKA,QAAO,OAAP;AACA;;AAED;;;;;;;AAOA,SAAS,YAAT,CAAuB,OAAvB,EAAgC,MAAhC,EAAwC;AACvC,KACC,IAAI,kBAAQ,IAAR,CAAa,MAAb,CADL;AAAA,KAEC,WAAW,QAAQ,QAFpB;AAAA,KAGC,UAAU,EAHX;AAAA,KAIC,WAAW,EAJZ;AAAA,KAKC,SAAS,QAAQ,MALlB;;AAOA,GAAE,aAAF,EACE,IADF,CACO,OADP,EAEE,IAFF,CAEO,UAAC,CAAD,EAAI,OAAJ,EAAgB;AACrB,MAAI,aAAa,EAAE,OAAF,EACf,IADe,CACV,WADU,EAEf,IAFe,CAEV,MAFU,CAAjB;;AAIA;AACA,MAAI,CAAC,iBAAiB,IAAjB,CAAsB,UAAtB,CAAL,EAAwC;AACvC,gBAAa,CACX,SAAS,UAAT,GAAsB,SADX,EAEZ,QAFY,EAGZ,UAHY,EAGA,IAHA,CAGK,EAHL,CAAb;AAIA;AACA,GAND,MAMO;AACN,gBAAa,CACX,SAAS,QAAT,GAAoB,OADT,EAEZ,UAFY,EAEA,IAFA,CAEK,EAFL,CAAb;AAGA;AACA;;AAED,YAAU;AACT,aAAW,EAAE,OAAF,EACT,IADS,CACJ,cADI,EAET,IAFS,EADF;AAIT,gBAAc;AACb,SAAM,EAAE,OAAF,EAAW,IAAX,CAAgB,eAAhB,CADO;AAEb,SAAM,EAAE,OAAF,EAAW,IAAX,CAAgB,gBAAhB;AAFO,IAJL;AAQT,SAAO,CAAC,EAAE,OAAF,EACN,IADM,CACD,cADC,EAEN,IAFM,CAED,UAFC,KAEc,EAFf,EAGJ,IAHI,EARE;AAYT,WAAS,CAAC,EAAE,OAAF,EACR,IADQ,CACH,gBADG,EAER,IAFQ,MAEE,EAFH,EAGN,IAHM,OAGK,EAfL;AAgBT,aAAW,CAAC,EAAE,OAAF,EACV,IADU,CACL,gBADK,EAEV,IAFU,MAEA,EAFD,EAGR,OAHQ,CAGA,UAHA,EAGY,EAHZ,EAGgB;AAHhB,IAIR,IAJQ,EAhBF;AAqBT,QAAM,CAAC,EAAE,OAAF,EACL,IADK,CACA,UADA,KACe,EADhB,EAEH,IAFG,EArBG;AAwBT,UAAQ,CAAC,EAAE,OAAF,EACP,IADO,CACF,oBADE,EAEP,IAFO,MAEG,EAFJ,EAGL,OAHK,CAGG,eAHH,EAGoB,EAHpB,EAIL,IAJK,EAxBC,EA4BE;AACX,UAAQ,CAAC,EAAE,OAAF,EACP,IADO,CACF,WADE,EAEP,IAFO,MAEG,EAFJ,EAGL,IAHK,EA7BC;AAiCT,QAAM;AAjCG,GAAV;;AAoCA;AACA,MAAI,OAAO,QAAQ,WAAR,CAAoB,GAA3B,KAAmC,WAAnC,IACH,OAAO,QAAQ,WAAR,CAAoB,GAA3B,KAAmC,WADpC,EACiD;AAChD,UAAO,QAAQ,WAAf;AACA;;AAED,WAAS,IAAT,CAAc,OAAd;AACA,EAhEF;;AAkEA,QAAO,QAAP;AACA;;AAED;;;;;;;AAOA,SAAS,gBAAT,CAA2B,OAA3B,EAAoC,MAApC,EAA4C;AAC3C,KAAI,IAAI,kBAAQ,IAAR,CAAa,MAAb,CAAR;;AAEA,GAAE,mBAAF,EAAuB,IAAvB,CAA4B,GAA5B,EAAiC,IAAjC,CAAsC,UAAC,CAAD,EAAI,OAAJ,EAAgB;AACrD,MAAI,WAAW,EAAE,OAAF,EAAW,IAAX,GAAkB,IAAlB,EAAf;;AAEA;AACA,MAAI,iBAAiB,IAAjB,CAAsB,QAAtB,CAAJ,EAAqC;AACpC,KAAE,OAAF,EAAW,IAAX,GAAkB,IAAlB,CAAuB,IAAvB,EAA6B,IAA7B,CAAkC,UAAC,CAAD,EAAI,EAAJ,EAAW;AAC5C,YAAQ,WAAR,GAAsB,EAAE,EAAF,EAAM,IAAN,GAAa,IAAb,EAAtB;AACA,IAFD;;AAIA;AACA;;AAED;AACA,MAAI,QAAQ,IAAR,CAAa,QAAb,CAAJ,EAA4B;AAC3B,KAAE,OAAF,EAAW,MAAX,GAAoB,IAApB,CAAyB,IAAzB,EAA+B,IAA/B,CAAoC,UAAC,CAAD,EAAI,EAAJ,EAAW;AAC9C,QAAI,QAAQ,EAAE,EAAF,EAAM,IAAN,GAAa,IAAb,EAAZ;;AAEA;AACA,QAAI,SAAS,IAAT,CAAc,KAAd,CAAJ,EAA0B;AACzB,aAAQ,WAAR,GAAsB,MAAM,SAAN,CAAgB,MAAM,OAAN,CAAc,GAAd,CAAhB,CAAtB;AACA;AACA;;AAED;AACA,QAAI,KAAK,IAAL,CAAU,KAAV,CAAJ,EAAsB;AACrB,aAAQ,KAAR,GAAgB,KAAhB;AACA;AACD,IAbD;;AAeA;AACA;AACD,EA/BD;AAgCA;;AAED;;;;;;;;;;;AAWA,SAAS,kBAAT,CAA6B,OAA7B,EAAsC,KAAtC,EAA6C;AAC5C,KACC,iBAAiB,KAAK,KAAL,CAAW,KAAK,SAAL,CAAe,uBAAf,CAAX,CADlB;;AAEC;AACA,QAAO,IAHR;;AAKA;AACA,gBAAe,QAAf,GAA0B,CACzB,eAAK,UAAL,CAAgB,QAAhB,CAAyB,QAAQ,IAAjC,EAAuC,KAAK,OAAL,CAAa,IAApD,EAA0D,EAA1D,CADyB;AAEzB;AACA,gBAAK,UAAL,CAAgB,QAAhB,CACC,QAAQ,QADT,EAEC,KAAK,OAAL,CAAa,QAFd,EAGC,iBAHD,CAHyB,EAOxB,IAPwB,CAOnB,GAPmB,CAA1B;;AASA;AACA,QACE,IADF,CACO,OADP,EAEE,OAFF,CAEU,UAAC,GAAD,EAAS;AACjB,MAAI,CAAC,WAAW,OAAX,CAAmB,GAAnB,CAAD,IACH,eAAK,UAAL,CAAgB,OAAhB,CAAwB,eAAe,GAAf,CAAxB,CADG,IAEH,eAAK,UAAL,CAAgB,OAAhB,CAAwB,wBAAwB,GAAxB,CAAxB,CAFD,EAEwD;AACvD,kBAAe,GAAf,IAAsB,QAAQ,GAAR,CAAtB;AACA;AACD,EARF;;AAUA;AACA,KAAI,eAAK,UAAL,CAAgB,OAAhB,CAAwB,eAAe,IAAvC,CAAJ,EAAkD;AACjD,iBAAe,IAAf,GAAsB,YAAtB;AACA;;AAED;AACA,gBAAe,IAAf,GAAsB,CACrB,eAAe,IADM,EAErB,eAAK,UAAL,CAAgB,QAAhB,CAAyB,QAAQ,QAAjC,EAA2C,gBAA3C,CAFqB,EAEyC,IAFzC,CAE8C,EAF9C,CAAtB;;AAIA;AACA,gBAAe,IAAf,GAAsB,CAAC,eAAe,IAAhB,EAAsB,mBAAtB,EAA2C,IAA3C,CAAgD,EAAhD,CAAtB;;AAEA;AACA,KAAI,CAAC,eAAK,UAAL,CAAgB,OAAhB,CAAwB,KAAxB,CAAL,EAAqC;AACpC,iBAAe,IAAf,GAAsB,CACrB,eAAe,IADM,EAErB,iBAFqB,EAGrB,mBAAmB,KAAnB,CAHqB,EAGM,IAHN,CAGW,EAHX,CAAtB;AAIA;;AAED;AACA,KAAI,CAAC,eAAK,UAAL,CAAgB,OAAhB,CAAwB,QAAQ,MAAhC,CAAL,EAA8C;AAC7C,iBAAe,IAAf,GAAsB,CACrB,eAAe,IADM,EAErB,eAFqB,EAGrB,QAAQ,MAHa,EAGL,IAHK,CAGA,EAHA,CAAtB;AAIA;;AAED;AACA,KAAI,CAAC,eAAK,UAAL,CAAgB,OAAhB,CAAwB,QAAQ,MAAhC,CAAL,EAA8C;AAC7C,iBAAe,IAAf,GAAsB,CACrB,eAAe,IADM,EAErB,eAFqB,EAGrB,QAAQ,MAHa,EAGL,IAHK,CAGA,EAHA,CAAtB;AAIA;;AAED,OAAM,6BAAN,EAAqC,cAArC;;AAEA,QAAO,cAAP;AACA;;IAEY,M,WAAA,M;AACZ,iBAAY,OAAZ,EAAqB;AAAA;;AACpB,OAAK,OAAL,GAAe,WAAW,EAA1B;AACA,OAAK,OAAL,GAAe,IAAI,cAAI,OAAR,CAAgB,KAAK,OAArB,CAAf;AACA;;;;0BAEQ,O,EAAS,Q,EAAU;AAC3B,OACC,aADD;AAAA,OAEC,mBAFD;AAAA,OAGC,mBAHD;AAAA,OAIC,uBAJD;AAAA,OAKC,OAAO,IALR;;AAOA;AACA,gBAAa,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC7C,QAAI,eAAK,UAAL,CAAgB,OAAhB,CAAwB,OAAxB,CAAJ,EAAsC;AACrC,YAAO,OAAO,IAAI,KAAJ,CAAU,yBAAV,CAAP,CAAP;AACA;;AAED,QAAI,OAAO,OAAP,KAAmB,QAAnB,IAA+B,eAAK,UAAL,CAAgB,OAAhB,CAAwB,QAAQ,GAAhC,CAAnC,EAAyE;AACxE,YAAO,OAAO,IAAI,KAAJ,CAAU,yBAAV,CAAP,CAAP;AACA;;AAED,iBAAa,OAAO,OAAP,KAAmB,QAAnB,GAA8B,OAA9B,GAAwC,QAAQ,GAA7D;AACA,qBAAiB,cAAI,KAAJ,CAAU,UAAV,CAAjB;AACA,mBAAe,MAAf,GAAwB,SAAS,IAAT,CAAc,eAAe,QAA7B,CAAxB;;AAEA,UAAM,4BAAN,EAAoC,cAApC;;AAEA,WAAO,KAAK,OAAL,CACL,GADK,CACD,cADC,EAEL,IAFK,CAEA,UAAC,MAAD,EAAY;AACjB,WAAM,sBAAN,EAA8B,OAA9B;AACA,SAAI,UAAgB,kBAAN,YAAyB,UAAzB,EAAqC,MAArC,CAAd;;AAEA,YAAO,QAAQ,OAAR,CAAP;AACA,KAPK,EAQL,KARK,CAQC,MARD,CAAP;AASA,IAxBY,CAAb;;AA0BA,UAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACvC,WAAO,WACL,IADK,CACA,UAAC,OAAD,EAAa;AAClB,SAAI,CAAC,QAAQ,QAAb,EAAuB;AACtB,aAAO,QAAQ,OAAR,CAAP;AACA;;AAED;AACA,SAAI,CAAC,iBAAiB,IAAjB,CAAsB,QAAQ,QAA9B,CAAL,EAA8C;AAC7C,cAAQ,QAAR,GAAmB,CAClB,SADkB,EAElB,eAAe,QAFG,EAGlB,QAAQ,QAHU,EAGA,IAHA,CAGK,EAHL,CAAnB;AAIA;;AAED;AACA,sBAAiB,cAAI,KAAJ,CAAU,QAAQ,QAAlB,CAAjB;;AAEA,YAAO,KAAK,OAAL,CACL,GADK,CACD,cADC,EAEL,IAFK,CAEA,UAAC,MAAD,EAAY;AACX,sBAAN,YAAuB,OAAvB,EAAgC,MAAhC;;AAEA,aAAO,QAAQ,OAAR,CAAP;AACA,MANK,EAOL,KAPK,CAOC,MAPD,CAAP;AAQA,KAzBK,EA0BL,KA1BK,CA0BC,MA1BD,CAAP;AA2BA,IA5BM,CAAP;;AA8BA;AACA,UAAO,eAAK,UAAL,CAAgB,iBAAhB,CAAkC,IAAlC,EAAwC,QAAxC,CAAP;AACA;;;uBAEK,O,EAAS,Q,EAAU;AACxB;AACA,UAAO,KAAK,MAAL,CAAY,OAAZ,EAAqB,SAArB,EAAgC,QAAhC,CAAP;AACA;;;yBAEO,O,EAAS,K,EAAO,Q,EAAU;AAAA;;AACjC,OAAI,OAAO,KAAP,KAAiB,UAAjB,IAA+B,eAAK,UAAL,CAAgB,OAAhB,CAAwB,QAAxB,CAAnC,EAAsE;AACrE,eAAW,KAAX;AACA,YAAQ,OAAO,OAAP,KAAmB,QAAnB,GAA8B,OAA9B,GAAwC,KAAhD;AACA,cAAU,OAAO,OAAP,KAAmB,QAAnB,GAA8B,EAA9B,GAAmC,OAA7C;AACA;;AAED,OAAI,eAAK,UAAL,CAAgB,OAAhB,CAAwB,KAAxB,KAAkC,OAAO,OAAP,KAAmB,QAAzD,EAAmE;AAClE,YAAQ,OAAR;AACA,cAAU,EAAV;AACA;;AAED,OAAI,OAAO,OAAP,KAAmB,UAAvB,EAAmC;AAClC,eAAW,OAAX;AACA,cAAU,EAAV;AACA;AACA,YAAQ,SAAR;AACA;;AAED;AACA,aAAU,WAAW,EAArB;;AAEA,OACC,aADD;AAAA,OAEC,OAAO,IAFR;;AAIA;AACA,UAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACvC;AACA,QAAI,iBAAuB,kBAAN,aAAyB,OAAzB,EAAkC,KAAlC,CAArB;;AAEA,UAAM,4BAAN,EAAoC,cAApC;;AAEA,QAAI,eAAK,UAAL,CAAgB,OAAhB,CAAwB,eAAe,QAAvC,CAAJ,EAAsD;AACrD,YAAO,OACN,IAAI,KAAJ,CACC,4DADD,CADM,CAAP;AAGA;;AAED,WAAO,KAAK,OAAL,CACL,GADK,CACD,cADC,EAEL,IAFK,CAEA,UAAC,MAAD,EAAY;AACjB,SAAI,WAAW,aAAa,cAAb,EAA6B,MAA7B,CAAf;AACA,WAAM,mBAAN,EAA2B,SAAS,MAApC;;AAEA,YAAO,QAAQ,QAAR,CAAP;AACA,KAPK,EAQL,KARK,CAQC,MARD,CAAP;AASA,IArBM,CAAP;;AAuBA;AACA,UAAO,eAAK,UAAL,CAAgB,iBAAhB,CAAkC,IAAlC,EAAwC,QAAxC,CAAP;AACA;;;;;;kBAGa,EAAE,cAAF,E","file":"index.js","sourcesContent":["'use strict';\n\nimport 'babel-polyfill';\nimport 'source-map-support/register';\nimport cheerio from 'cheerio';\nimport core from './core.js';\nimport debugLog from 'debug';\nimport url from 'url';\nimport web from './web.js';\n\nconst\n\tdebug = debugLog('craigslist'),\n\tDEFAULT_BASE_HOST = 'craigslist.org',\n\tDEFAULT_CATEGORY = 'sss',\n\tDEFAULT_PATH = '/search/',\n\tDEFAULT_QUERYSTRING = '?sort=rel',\n\tDEFAULT_REQUEST_OPTIONS = {\n\t\thostname : '',\n\t\tpath : '',\n\t\tsecure : true\n\t},\n\tQUERY_KEYS = [\n\t\t'category',\n\t\t'maxAsk',\n\t\t'minAsk',\n\t\t'query'\n\t],\n\tQUERY_PARAM_MAX = '&maxAsk=',\n\tQUERY_PARAM_MIN = '&minAsk=',\n\tQUERY_PARAM_QUERY = '&query=',\n\tRE_QUALIFIED_URL = /^\\/\\/[a-z0-9\\-]*\\.craigslist\\.[a-z]*/i;\n\n/**\n * Accepts strong of HTML and parses that string to find key details.\n *\n * @param {string} postingUrl - URL that details were loaded from\n * @param {string} markup - Markup from the request to Craigslist\n * @returns {object} details - The processed details from the Craigslist posting\n **/\nfunction _getPostingDetails (postingUrl, markup) {\n\tlet\n\t\t$ = cheerio.load(markup),\n\t\tdetails = {};\n\n\tdetails.description = ($('#postingbody').text() || '').trim();\n\tdetails.mapUrl = $('div.mapbox p.mapaddress')\n\t\t.find('a')\n\t\t.attr('href');\n\tdetails.pid = postingUrl\n\t\t.substring(postingUrl.search(/[0-9]*\\.html/))\n\t\t.replace(/\\.html/, '');\n\tdetails.replyUrl = ($('#replylink').attr('href') || '').trim();\n\tdetails.title = ($('#titletextonly').text() || '').trim();\n\tdetails.url = postingUrl;\n\n\t// populate posting info\n\t$('div.postinginfos').find('p.postinginfo').each((i, element) => {\n\t\tlet infoType = $(element).text();\n\n\t\t// set pid (a backup to ripping it from the URL)\n\t\tif (/post\\sid/i.test(infoType)) {\n\t\t\tdetails.pid = (infoType.split(/\\:/)[1] || '').trim();\n\t\t\treturn;\n\t\t}\n\n\t\t// set postedAt\n\t\tif (/posted/i.test(infoType) && $(element).find('time').attr('datetime')) {\n\t\t\tdetails.postedAt = new Date($(element).find('time').attr('datetime'));\n\t\t\treturn;\n\t\t}\n\n\t\t// set updatedAt\n\t\tif (/updated/i.test(infoType) && $(element).find('time').attr('datetime')) {\n\t\t\tdetails.updatedAt = new Date($(element).find('time').attr('datetime'));\n\t\t\treturn;\n\t\t}\n\t});\n\n\t// populate posting photos\n\t$('#thumbs').find('a').each((i, element) => {\n\t\tdetails.images = details.images || [];\n\t\tdetails.images.push(($(element).attr('href') || '').trim());\n\t});\n\n\treturn details;\n}\n\n/**\n * Accepts string of HTML and parses that string to find all pertinent postings.\n *\n * @param {object} options - Request options used for the request to craigslist\n * @param {string} markup - Markup from the request to Craigslist\n * @returns {Array} postings - The processed and normalized array of postings\n **/\nfunction _getPostings (options, markup) {\n\tlet\n\t\t$ = cheerio.load(markup),\n\t\thostname = options.hostname,\n\t\tposting = {},\n\t\tpostings = [],\n\t\tsecure = options.secure;\n\n\t$('div.content')\n\t\t.find('p.row')\n\t\t.each((i, element) => {\n\t\t\tlet detailsUrl = $(element)\n\t\t\t\t.find('span.pl a')\n\t\t\t\t.attr('href');\n\n\t\t\t// introducing fix for #6\n\t\t\tif (!RE_QUALIFIED_URL.test(detailsUrl)) {\n\t\t\t\tdetailsUrl = [\n\t\t\t\t\t(secure ? 'https://' : 'http://'),\n\t\t\t\t\thostname,\n\t\t\t\t\tdetailsUrl].join('');\n\t\t\t\t// debug('adjusted URL for posting to (%s)', detailsUrl);\n\t\t\t} else {\n\t\t\t\tdetailsUrl = [\n\t\t\t\t\t(secure ? 'https:' : 'http:'),\n\t\t\t\t\tdetailsUrl].join('');\n\t\t\t\t// debug('adjusted URL for postings to (%s)', detailsUrl);\n\t\t\t}\n\n\t\t\tposting = {\n\t\t\t\tcategory : $(element)\n\t\t\t\t\t.find('span.l2 a.gc')\n\t\t\t\t\t.text(),\n\t\t\t\tcoordinates : {\n\t\t\t\t\tlat : $(element).attr('data-latitude'),\n\t\t\t\t\tlon : $(element).attr('data-longitude')\n\t\t\t\t},\n\t\t\t\tdate : ($(element)\n\t\t\t\t\t.find('span.pl time')\n\t\t\t\t\t.attr('datetime') || '')\n\t\t\t\t\t\t.trim(),\n\t\t\t\thasPic : ($(element)\n\t\t\t\t\t.find('span.l2 span.p')\n\t\t\t\t\t.text() || '')\n\t\t\t\t\t\t.trim() !== '',\n\t\t\t\tlocation : ($(element)\n\t\t\t\t\t.find('span.pnr small')\n\t\t\t\t\t.text() || '')\n\t\t\t\t\t\t.replace(/[\\(,\\)]/g, '') // santize\n\t\t\t\t\t\t.trim(),\n\t\t\t\tpid : ($(element)\n\t\t\t\t\t.attr('data-pid') || '')\n\t\t\t\t\t\t.trim(),\n\t\t\t\tprice : ($(element)\n\t\t\t\t\t.find('span.l2 span.price')\n\t\t\t\t\t.text() || '')\n\t\t\t\t\t\t.replace(/^\\&\\#x0024\\;/g, '')\n\t\t\t\t\t\t.trim(), // sanitize\n\t\t\t\ttitle : ($(element)\n\t\t\t\t\t.find('span.pl a')\n\t\t\t\t\t.text() || '')\n\t\t\t\t\t\t.trim(),\n\t\t\t\turl : detailsUrl\n\t\t\t};\n\n\t\t\t// make sure lat / lon is valid\n\t\t\tif (typeof posting.coordinates.lat === 'undefined' ||\n\t\t\t\ttypeof posting.coordinates.lon === 'undefined') {\n\t\t\t\tdelete posting.coordinates;\n\t\t\t}\n\n\t\t\tpostings.push(posting);\n\t\t});\n\n\treturn postings;\n}\n\n/**\n * Accepts strong of HTML and parses that string to find key details.\n *\n * @param {object} details - a posting object to populate\n * @param {string} markup - Markup from the request to Craigslist\n * @returns {null} - Returns empty\n **/\nfunction _getReplyDetails (details, markup) {\n\tlet $ = cheerio.load(markup);\n\n\t$('div.reply_options').find('b').each((i, element) => {\n\t\tlet infoType = $(element).text().trim();\n\n\t\t// set contact name\n\t\tif (/contact\\sname/i.test(infoType)) {\n\t\t\t$(element).next().find('li').each((i, li) => {\n\t\t\t\tdetails.contactName = $(li).text().trim();\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\n\t\t// set phone number and email\n\t\tif (/call/i.test(infoType)) {\n\t\t\t$(element).parent().find('li').each((i, li) => {\n\t\t\t\tlet value = $(li).text().trim();\n\n\t\t\t\t// check for phone value (based on the emoji)\n\t\t\t\tif (/\\u260E/.test(value)) {\n\t\t\t\t\tdetails.phoneNumber = value.substring(value.indexOf('('));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// check for email value (based on the @ symbol)\n\t\t\t\tif (/\\@/.test(value)) {\n\t\t\t\t\tdetails.email = value;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\t});\n}\n\n/**\n * Accepts options, iterates through the known acceptable keys from defaultOptions\n * and if found in input options, uses that. If not found in input options to method,\n * falls back to the options specified when the module was initialized. If not found\n * in initialization options, uses the default options setting. All keys provided in\n * the input options variable are retained.\n *\n * @param {object} options - Input options for the web request\n * @param {string} query - A querystring\n * @returns {object} options - The coalesced result of options\n **/\nfunction _getRequestOptions (options, query) {\n\tvar\n\t\trequestOptions = JSON.parse(JSON.stringify(DEFAULT_REQUEST_OPTIONS)),\n\t\t/*eslint no-invalid-this:0*/\n\t\tself = this;\n\n\t// ensure default options are set, even if omitted from input options\n\trequestOptions.hostname = [\n\t\tcore.Validation.coalesce(options.city, self.options.city, ''),\n\t\t// introducing fix for #7\n\t\tcore.Validation.coalesce(\n\t\t\toptions.baseHost,\n\t\t\tself.options.baseHost,\n\t\t\tDEFAULT_BASE_HOST)\n\t].join('.');\n\n\t// preserve any extraneous input option keys (may have addition instructions for underlying request object)\n\tObject\n\t\t.keys(options)\n\t\t.forEach((key) => {\n\t\t\tif (!QUERY_KEYS.indexOf(key) &&\n\t\t\t\tcore.Validation.isEmpty(requestOptions[key]) &&\n\t\t\t\tcore.Validation.isEmpty(DEFAULT_REQUEST_OPTIONS[key])) {\n\t\t\t\trequestOptions[key] = options[key];\n\t\t\t}\n\t\t});\n\n\t// setup path\n\tif (core.Validation.isEmpty(requestOptions.path)) {\n\t\trequestOptions.path = DEFAULT_PATH;\n\t}\n\n\t// setup category\n\trequestOptions.path = [\n\t\trequestOptions.path,\n\t\tcore.Validation.coalesce(options.category, DEFAULT_CATEGORY)].join('');\n\n\t// setup querystring\n\trequestOptions.path = [requestOptions.path, DEFAULT_QUERYSTRING].join('');\n\n\t// add search query (if specified)\n\tif (!core.Validation.isEmpty(query)) {\n\t\trequestOptions.path = [\n\t\t\trequestOptions.path,\n\t\t\tQUERY_PARAM_QUERY,\n\t\t\tencodeURIComponent(query)].join('');\n\t}\n\n\t// add min asking price (if specified)\n\tif (!core.Validation.isEmpty(options.minAsk)) {\n\t\trequestOptions.path = [\n\t\t\trequestOptions.path,\n\t\t\tQUERY_PARAM_MIN,\n\t\t\toptions.minAsk].join('');\n\t}\n\n\t// add max asking price (if specified)\n\tif (!core.Validation.isEmpty(options.maxAsk)) {\n\t\trequestOptions.path = [\n\t\t\trequestOptions.path,\n\t\t\tQUERY_PARAM_MAX,\n\t\t\toptions.maxAsk].join('');\n\t}\n\n\tdebug('setting request options: %o', requestOptions);\n\n\treturn requestOptions;\n}\n\nexport class Client {\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t\tthis.request = new web.Request(this.options);\n\t}\n\n\tdetails (posting, callback) {\n\t\tlet\n\t\t\texec,\n\t\t\tgetDetails,\n\t\t\tpostingUrl,\n\t\t\trequestOptions,\n\t\t\tself = this;\n\n\t\t// retrieves the posting details directly\n\t\tgetDetails = new Promise((resolve, reject) => {\n\t\t\tif (core.Validation.isEmpty(posting)) {\n\t\t\t\treturn reject(new Error('posting URL is required'));\n\t\t\t}\n\n\t\t\tif (typeof posting !== 'string' && core.Validation.isEmpty(posting.url)) {\n\t\t\t\treturn reject(new Error('posting URL is required'));\n\t\t\t}\n\n\t\t\tpostingUrl = typeof posting === 'string' ? posting : posting.url;\n\t\t\trequestOptions = url.parse(postingUrl);\n\t\t\trequestOptions.secure = /https/i.test(requestOptions.protocol);\n\n\t\t\tdebug('request options set to: %o', requestOptions);\n\n\t\t\treturn self.request\n\t\t\t\t.get(requestOptions)\n\t\t\t\t.then((markup) => {\n\t\t\t\t\tdebug('retrieved posting %o', posting);\n\t\t\t\t\tlet details = self::_getPostingDetails(postingUrl, markup);\n\n\t\t\t\t\treturn resolve(details);\n\t\t\t\t})\n\t\t\t\t.catch(reject);\n\t\t});\n\n\t\texec = new Promise((resolve, reject) => {\n\t\t\treturn getDetails\n\t\t\t\t.then((details) => {\n\t\t\t\t\tif (!details.replyUrl) {\n\t\t\t\t\t\treturn resolve(details);\n\t\t\t\t\t}\n\n\t\t\t\t\t// properly adjust reply URL\n\t\t\t\t\tif (!RE_QUALIFIED_URL.test(details.replyUrl)) {\n\t\t\t\t\t\tdetails.replyUrl = [\n\t\t\t\t\t\t\t'http://',\n\t\t\t\t\t\t\trequestOptions.hostname,\n\t\t\t\t\t\t\tdetails.replyUrl].join('');\n\t\t\t\t\t}\n\n\t\t\t\t\t// set request options to retrieve posting contact info\n\t\t\t\t\trequestOptions = url.parse(details.replyUrl);\n\n\t\t\t\t\treturn self.request\n\t\t\t\t\t\t.get(requestOptions)\n\t\t\t\t\t\t.then((markup) => {\n\t\t\t\t\t\t\tself::_getReplyDetails(details, markup);\n\n\t\t\t\t\t\t\treturn resolve(details);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(reject);\n\t\t\t\t})\n\t\t\t\t.catch(reject);\n\t\t});\n\n\t\t// execute!\n\t\treturn core.Validation.promiseOrCallback(exec, callback);\n\t}\n\n\tlist (options, callback) {\n\t\t/*eslint no-undefined:0*/\n\t\treturn this.search(options, undefined, callback);\n\t}\n\n\tsearch (options, query, callback) {\n\t\tif (typeof query === 'function' && core.Validation.isEmpty(callback)) {\n\t\t\tcallback = query;\n\t\t\tquery = typeof options === 'string' ? options : query;\n\t\t\toptions = typeof options === 'string' ? {} : options;\n\t\t}\n\n\t\tif (core.Validation.isEmpty(query) && typeof options === 'string') {\n\t\t\tquery = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\tif (typeof options === 'function') {\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t\t/*eslint no-undefined:0*/\n\t\t\tquery = undefined;\n\t\t}\n\n\t\t// ensure options is at least a blank object before continuing\n\t\toptions = options || {};\n\n\t\tlet\n\t\t\texec,\n\t\t\tself = this;\n\n\t\t// create a Promise to execute the request\n\t\texec = new Promise((resolve, reject) => {\n\t\t\t// remap options for the request\n\t\t\tlet requestOptions = this::_getRequestOptions(options, query);\n\n\t\t\tdebug('request options set to: %o', requestOptions);\n\n\t\t\tif (core.Validation.isEmpty(requestOptions.hostname)) {\n\t\t\t\treturn reject(\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\t'unable to set hostname (check to see if city is specified)'));\n\t\t\t}\n\n\t\t\treturn self.request\n\t\t\t\t.get(requestOptions)\n\t\t\t\t.then((markup) => {\n\t\t\t\t\tlet postings = _getPostings(requestOptions, markup);\n\t\t\t\t\tdebug('found %d postings', postings.length);\n\n\t\t\t\t\treturn resolve(postings);\n\t\t\t\t})\n\t\t\t\t.catch(reject);\n\t\t});\n\n\t\t// execute!\n\t\treturn core.Validation.promiseOrCallback(exec, callback);\n\t}\n}\n\nexport default { Client }\n"],"sourceRoot":"/source/"}