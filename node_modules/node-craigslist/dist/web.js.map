{"version":3,"sources":["web.js"],"names":[],"mappings":"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","file":"web.js","sourcesContent":["'use strict'\n\nimport 'babel-polyfill';\nimport 'source-map-support/register';\nimport core from './core.js';\nimport debugLog from 'debug';\nimport events from 'events';\nimport http from 'http';\nimport https from 'https';\nimport url from 'url';\n\nconst\n\tdebug = debugLog('craigslist'),\n\tDEFAULT_MAX_REDIRECT_COUNT = 5,\n\tDEFAULT_RETRY_COUNT = 3,\n\tDEFAULT_TIMEOUT = 30000,\n\tEVENT_REDIRECT = 'redirect',\n\tEVENT_REQUEST = 'request',\n\tEVENT_RESPONSE = 'response',\n\tFIRST_TRY = 1,\n\tHTTP_ERROR_CODE_THRESHHOLD = 400,\n\tHTTP_ERROR_CODE_RETRY_THRESHHOLD = 500,\n\t// reference: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#3xx_Redirection\n\tHTTP_PROXY_REQUIRED = 305,\n\tHTTP_REDIRECT_CODE_PERM = 301,\n\tHTTP_REDIRECT_CODE_TEMP = 302,\n\tHTTP_REDIRECT_NEW_CODE_PERM = 308,\n\tHTTP_REDIRECT_NEW_CODE_TEMP = 307,\n\tREQUEST_OPTIONS = [\n\t\t'agent',\n\t\t'auth',\n\t\t'family',\n\t\t'headers',\n\t\t'host',\n\t\t'hostname',\n\t\t'json',\n\t\t'localAddress',\n\t\t'maxRetries',\n\t\t'method',\n\t\t'path',\n\t\t'pathname',\n\t\t'port',\n\t\t'protocol',\n\t\t'query',\n\t\t'rejectUnauthorized',\n\t\t'maxRetries',\n\t\t'rawStream',\n\t\t'secure',\n\t\t'socketPath',\n\t\t'timeout'],\n\tSECURE_PROTOCOL_RE = /^https/i;\n\nfunction _augmentRequestOptions (options) {\n\tlet\n\t\taugmented = {},\n\t\t/*eslint no-invalid-this:0*/\n\t\tself = this;\n\n\t// ensure options exist\n\toptions = options || {};\n\n\t// apply settings from Ctor\n\tREQUEST_OPTIONS.forEach((field) => {\n\t\tlet value = core.Validation.coalesce(options[field], self.settings[field]);\n\n\t\tif (!core.Validation.isEmpty(value)) {\n\t\t\tdebug(\n\t\t\t\t'request %s will be set to %s (options = %s, settings = %s)',\n\t\t\t\tfield,\n\t\t\t\tvalue,\n\t\t\t\toptions[field],\n\t\t\t\tself.settings[field]);\n\t\t\taugmented[field] = value;\n\t\t}\n\t});\n\n\t// ensure maxRetries is applied if one is not supplied\n\taugmented.maxRetries = core.Validation.coalesce(\n\t\taugmented.maxRetries,\n\t\tDEFAULT_RETRY_COUNT);\n\n\t// ensure rawStream setting is applied if not supplied\n\taugmented.rawStream = core.Validation.isEmpty(augmented.rawStream) ?\n\t\tfalse :\n\t\taugmented.rawStream;\n\n\t// ensure default timeout is applied if one is not supplied\n\taugmented.timeout = core.Validation.coalesce(augmented.timeout, DEFAULT_TIMEOUT);\n\n\t// create `path` from pathname and query.\n\taugmented.path = core.Validation.coalesce(augmented.path, augmented.pathname);\n\n\treturn augmented;\n}\n\nfunction _exec (options, data, tryCount, callback) {\n\tif (typeof data === 'function' && core.Validation.isEmpty(callback)) {\n\t\tcallback = data;\n\t\t/*eslint no-undefined:0*/\n\t\tdata = undefined;\n\t\ttryCount = FIRST_TRY;\n\t}\n\n\tif (typeof tryCount === 'function' && core.Validation.isEmpty(callback)) {\n\t\tcallback = tryCount;\n\t\ttryCount = FIRST_TRY;\n\t}\n\n\tdata = data || '';\n\toptions.headers = options.headers || {};\n\ttryCount = tryCount || FIRST_TRY;\n\n\tlet\n\t\texec,\n\t\tredirectCount = 0,\n\t\t/*eslint no-invalid-this:0*/\n\t\tself = this;\n\n\texec = new Promise(function (resolve, reject) {\n\t\tif (typeof data !== 'string') {\n\t\t\tdata = JSON.stringify(data);\n\t\t}\n\n\t\t// apply content length header\n\t\toptions.headers['Content-Length'] = Buffer.byteLength(data);\n\n\t\t// apply application/json header if appropriate\n\t\tif (!options.rawStream && options.json && !options.headers['Content-Type']) {\n\t\t\toptions.headers['Content-Type'] = 'application/json';\n\t\t}\n\n\t\t// provide request event\n\t\tif (self.emit) {\n\t\t\tself.emit(EVENT_REQUEST, options);\n\t\t}\n\n\t\tlet makeRequest = function () {\n\t\t\tdebug('establishing request with options: %o', options);\n\t\t\tlet req = (options.secure ? https : http).request(\n\t\t\t\toptions,\n\t\t\t\t(res) => {\n\t\t\t\t\tlet\n\t\t\t\t\t\tchunks = [],\n\t\t\t\t\t\tcontext = {\n\t\t\t\t\t\t\theaders : res.headers,\n\t\t\t\t\t\t\tstatusCode : res.statusCode\n\t\t\t\t\t\t},\n\t\t\t\t\t\tredirect = [\n\t\t\t\t\t\t\tHTTP_REDIRECT_CODE_PERM,\n\t\t\t\t\t\t\tHTTP_REDIRECT_CODE_TEMP,\n\t\t\t\t\t\t\tHTTP_REDIRECT_NEW_CODE_PERM,\n\t\t\t\t\t\t\tHTTP_REDIRECT_NEW_CODE_TEMP\n\t\t\t\t\t\t].some((code) => (code === context.statusCode));\n\n\t\t\t\t\t// provide response event (as there are response headers)\n\t\t\t\t\tif (self.emit) {\n\t\t\t\t\t\tself.emit(EVENT_RESPONSE, context);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.statusCode === HTTP_PROXY_REQUIRED) {\n\t\t\t\t\t\tlet err = new Error('proxy server configuration required');\n\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\terr.response = context;\n\n\t\t\t\t\t\tdebug('error: proxy server required: %o', err);\n\n\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t}\n\n\t\t\t\t\t// check for HTTP redirect\n\t\t\t\t\tif (redirect) {\n\t\t\t\t\t\tif (core.Validation.isEmpty(context.headers.location)) {\n\t\t\t\t\t\t\tlet err = new Error('redirect requested with no location');\n\t\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\t\terr.response = context;\n\n\t\t\t\t\t\t\tdebug('error: missing redirect header: %o', err);\n\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (redirectCount >= DEFAULT_MAX_REDIRECT_COUNT) {\n\t\t\t\t\t\t\tlet err = new Error('maximum redirect limit exceeded');\n\t\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\t\terr.response = context;\n\n\t\t\t\t\t\t\tdebug('error: exceeded max number of redirects: %o', err);\n\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// remap options and redirect to supplied URL\n\t\t\t\t\t\tlet redirectUrl = url.parse(context.headers.location);\n\t\t\t\t\t\toptions = {\n\t\t\t\t\t\t\thost : redirectUrl.host || options.host || options.hostname,\n\t\t\t\t\t\t\tmethod : options.method,\n\t\t\t\t\t\t\tpath : redirectUrl.path,\n\t\t\t\t\t\t\tpathname : redirectUrl.pathname,\n\t\t\t\t\t\t\trawStream : options.rawStream,\n\t\t\t\t\t\t\tsecure : (redirectUrl.protocol ?\n\t\t\t\t\t\t\t\tSECURE_PROTOCOL_RE.test(redirectUrl.protocol) :\n\t\t\t\t\t\t\t\toptions.secure)\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// increment number of redirects (to avoid endless looping)\n\t\t\t\t\t\tredirectCount ++;\n\n\t\t\t\t\t\t// emit redirect event\n\t\t\t\t\t\tif (self.emit) {\n\t\t\t\t\t\t\tself.emit(EVENT_REDIRECT, options);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// re-request based on the redirect location\n\t\t\t\t\t\treturn setImmediate(makeRequest);\n\t\t\t\t\t}\n\n\t\t\t\t\t// for content-api requests (or other raw binary data requests)\n\t\t\t\t\t// rawStream may be set to true - in the event of this, return\n\t\t\t\t\t// the response directly\n\t\t\t\t\tif (options.rawStream) {\n\t\t\t\t\t\tif (context.statusCode >= HTTP_ERROR_CODE_THRESHHOLD) {\n\t\t\t\t\t\t\tlet err = new Error('resource not found');\n\t\t\t\t\t\t\terr.context = context;\n\n\t\t\t\t\t\t\tdebug('error: unable to process response: %o', context.statusCode);\n\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdebug('returning response as stream');\n\n\t\t\t\t\t\treturn resolve(res);\n\t\t\t\t\t}\n\n\t\t\t\t\t// standard API requests flow through below...\n\t\t\t\t\tres.setEncoding('utf-8');\n\n\t\t\t\t\tres.on('data', (chunk) => (chunks.push(chunk)));\n\n\t\t\t\t\tres.once('end', () => {\n\t\t\t\t\t\tlet\n\t\t\t\t\t\t\tbody = chunks.join(''),\n\t\t\t\t\t\t\tretry =\n\t\t\t\t\t\t\t\tcontext.statusCode >= HTTP_ERROR_CODE_RETRY_THRESHHOLD &&\n\t\t\t\t\t\t\t\ttryCount <= options.maxRetries;\n\n\t\t\t\t\t\t// attempt to parse the body\n\t\t\t\t\t\tif (typeof body === 'string' && body.length && options.json) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tbody = JSON.parse(body);\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\terr.body = body;\n\t\t\t\t\t\t\t\terr.context = context;\n\n\t\t\t\t\t\t\t\tdebug('error: unable to parse JSON response: %o', err);\n\n\t\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// handle retry if error code is above threshhold\n\t\t\t\t\t\tif (retry) {\n\t\t\t\t\t\t\tdebug(\n\t\t\t\t\t\t\t\t'retry: response status code: %o',\n\t\t\t\t\t\t\t\tcontext.statusCode);\n\t\t\t\t\t\t\ttryCount += 1;\n\t\t\t\t\t\t\treturn makeRequest();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// handle other response errors\n\t\t\t\t\t\tif (context.statusCode >= HTTP_ERROR_CODE_THRESHHOLD) {\n\t\t\t\t\t\t\tlet err = new Error('resource not found');\n\t\t\t\t\t\t\terr.body = body;\n\t\t\t\t\t\t\terr.context = context;\n\n\t\t\t\t\t\t\tdebug('error: resource not found: %o', err);\n\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdebug('successfully completed request');\n\n\t\t\t\t\t\t// resolve the request as complete\n\t\t\t\t\t\treturn resolve(body || '');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\treq.on('error', (err) => {\n\t\t\t\tdebug('error: unable to establish connection: %o', err);\n\n\t\t\t\t// retry if below retry count threshhold\n\t\t\t\tif (tryCount <= options.maxRetries) {\n\t\t\t\t\tdebug(\n\t\t\t\t\t\t'retry: %d retries remaining',\n\t\t\t\t\t\toptions.maxRetries - tryCount);\n\t\t\t\t\ttryCount += 1;\n\t\t\t\t\treturn makeRequest();\n\t\t\t\t}\n\n\t\t\t\treturn reject(err)\n\t\t\t});\n\n\t\t\t// timeout the connection\n\t\t\tif (options.timeout) {\n\t\t\t\tdebug('setting timeout value to %o', options.timeout);\n\t\t\t\treq.setTimeout(options.timeout, req.abort);\n\t\t\t}\n\n\t\t\t// write data to the connection\n\t\t\tif (data) {\n\t\t\t\tdebug('writing %d bytes of data', options.headers['Content-Length']);\n\t\t\t\treq.write(data);\n\t\t\t}\n\n\t\t\t// signal end of request data\n\t\t\treq.end();\n\t\t}\n\n\t\t// do it!\n\t\tmakeRequest();\n\t});\n\n\treturn core.Validation.promiseOrCallback(exec, callback);\n}\n\nexport class Request extends events.EventEmitter {\n\tconstructor (settings) {\n\t\tsuper();\n\t\tthis.settings = settings || {};\n\t}\n\n\t/*\n\tdelete (options, callback) {\n\t\tdebug('performing DELETE (%o)', options);\n\t\toptions = this::_augmentRequestOptions(options);\n\t\toptions.method = 'DELETE';\n\n\t\treturn this::_exec(options, callback);\n\t}\n\t//*/\n\n\tget (options, callback) {\n\t\tdebug('performing GET (%o)', options);\n\t\toptions = this::_augmentRequestOptions(options);\n\t\toptions.method = 'GET';\n\n\t\treturn this::_exec(options, callback);\n\t}\n\n\tgetRequestOptions (options) {\n\t\treturn this::_augmentRequestOptions(options);\n\t}\n\n\t/*\n\thead (options, callback) {\n\t\tdebug('performing HEAD (%o)', options);\n\t\toptions = this::_augmentRequestOptions(options);\n\t\toptions.method = 'HEAD';\n\n\t\treturn this::_exec(options, callback);\n\t}\n\t//*/\n\n\t/*\n\tpost (options, data, callback) {\n\t\tdebug('performing POST (%o)', options);\n\t\toptions = this::_augmentRequestOptions(options);\n\t\toptions.method = 'POST';\n\n\t\treturn this::_exec(options, data, callback);\n\t}\n\t//*/\n\n\t/*\n\tput (options, data, callback) {\n\t\tdebug('performing PUT (%o)', options);\n\t\toptions = this::_augmentRequestOptions(options);\n\t\toptions.method = 'PUT';\n\n\t\treturn this::_exec(options, data, callback);\n\t}\n\t//*/\n}\n\nexport default { Request }\n"],"sourceRoot":"/source/"}